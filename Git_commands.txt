#GIT COMMANDS

#-----------------------------------------------------------------------------------

#Format bash terminal (show branch name in terminal)
#add following lines at the end of ~/.bashrc
#######################
# Show git branch name
force_color_prompt=yes
color_prompt=yes
parse_git_branch() {
 git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
if [ "$color_prompt" = yes ]; then
 PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[01;31m\]$(parse_git_branch)\[\033[00m\]\$ '
else
 PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w$(parse_git_branch)\$ '
fi
unset color_prompt force_color_prompt
#######################

#Relaod the .bashrc file
source ~/.bashrc

#-----------------------------------------------------------------------------------

#Check if key already exist
ls -la ~/.ssh
#If id_rsa and id_rsa.pub keys do not exist
#generate new keys
ssh-keygen -t rsa -C "<E-mail_address>"
#check if ssh-agent is running
eval "$(ssh-agent -s)"
#Add new genereted key to ssh-agent
ssh-add ~/.ssh/id_rsa
#Copy public key and paste to GitHub
cat ~/.ssh/id_rsa
#Test if key is working
ssh -T git@github.com

#-----------------------------------------------------------------------------------

#Set anonymous E-mail
#In GitHub go to Settings->Emails
#In section Primary email address there is information what E-mail format will be used for web-based Git operations
#<ID>+<User_name>@users.noreply.github.com
git config --global user.email "{ID}+{username}@users.noreply.github.com"


#-----------------------------------------------------------------------------------

#Git Init
git init <dir_name>
git remote add origin <git_url>
git add <file>
git commit
git push --set-upstream origin master

#-----------------------------------------------------------------------------------

#Git Clone

