#GIT COMMANDS

#-----------------------------------------------------------------------------------

#Format bash terminal (show branch name in terminal)
#add following lines at the end of ~/.bashrc
#######################
##Start: add branch name in terminal
# Show git branch name
# '\012' - new line (ASCII)
# '\033' - ESC (ASCII)
force_color_prompt=yes
color_prompt=yes
parse_git_branch() {
 git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}
if [ "$color_prompt" = yes ]; then
 PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[01;31m\] $(parse_git_branch)\[\033[00m\]\012\$ '
else
 PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w$(parse_git_branch)\$ '
fi
unset color_prompt force_color_prompt
##End:   add branch name in terminal
#######################

#Relaod the .bashrc file
source ~/.bashrc

#-----------------------------------------------------------------------------------

#Check if key already exist
ls -la ~/.ssh
#If id_rsa and id_rsa.pub keys do not exist
#generate new keys
ssh-keygen -t rsa -C "<E-mail_address>"
#check if ssh-agent is running
eval "$(ssh-agent -s)"
#Add new genereted key to ssh-agent
ssh-add ~/.ssh/id_rsa
#Copy public key and paste to GitHub
cat ~/.ssh/id_rsa
#Test if key is working
ssh -T git@github.com

#-----------------------------------------------------------------------------------

#Set anonymous E-mail
#In GitHub go to Settings->Emails
#In section Primary email address there is information what E-mail format will be used for web-based Git operations
#<ID>+<User_name>@users.noreply.github.com
git config --global user.email "{ID}+{username}@users.noreply.github.com"
#Add new commit or amend existing one to update new E-mail
git commit <--amend>

#-----------------------------------------------------------------------------------

#Git Init
git init <dir_name>
git remote add origin <git_url>
git add <file>
git commit
git push --set-upstream origin master

#-----------------------------------------------------------------------------------

#Git Clone
git clone <git_url>
#Clone into specific directory
git clone <git_url> <dir_name>
#Clone and recurse into submodules (git versions 1.9 - 2.12)
git clone --recursive <git_url>
#Clone and recurse into submodules (git version 2.13+)
git clone --recurse-submodules <git_url>

#-----------------------------------------------------------------------------------

#How to copy file from one branch to another
git checkout main README.md

#-----------------------------------------------------------------------------------

#

#-----------------------------------------------------------------------------------

#Git merge



#If local git repo is added to existing remote repo, it will be considered as two different projects
#Merge can be done using
git pull origin master --allow-unrelated-histories
#or
git merge <branch_name> --allow-unrelated-histories


#-----------------------------------------------------------------------------------

# List all branches (local and remote)
git branch --all

#-----------------------------------------------------------------------------------

# Show only names of changed files
# Symbol explanation: Added (A), Copied (C), Deleted (D), Modified (M), Renamed (R), have their type (i.e. regular file, symlink, submodule...) changed (T), are Unmerged (U), are Unknown (X), or have had their pairing broken (B).
git diff --name-status [branch, commit...]

#-----------------------------------------------------------------------------------

# Remove branches that doesn't exist on remote
git fetch -p && for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'); do git branch -D $branch; done

#-----------------------------------------------------------------------------------
